/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package crypto
{
    import flash.system.ApplicationDomain;
    import flash.utils.ByteArray;
    
    //import shell.Program;

    /**
     * Generates a sequence of random bytes.
     * 
     * <p>
     * Use <code>generateRandomBytes()</code> to generate cryptographic keys,
     * strong identifiers, session ids, and so on.
     * The random sequence is generated using cryptographically strong functions
     * provided by the operating system.
     * If the appropriate function is not available on an individual client
     * computer or device, then an error is thrown.
     * </p>
     * 
     * <p>
     * <b>Note:</b> this is a temporary solution as the current redtamarin runtimes
     * does not implment <code>flash.crypto.generateRandomBytes</code> yet.<br>
     * It will work under Linux and Mac OS X but not under Windows (unless under a cygwin shell).
     * </p>
     * 
     * @param numberRandomBytes the number of random bytes to generate, between 1 and 1024.
     * @return a ByteArray containing the generated bytes.
     * 
     * @playerversion AVM 0.4
     * @playerversion POSIX +
     * @langversion 3.0
     * 
     * @see http://en.wikipedia.org/wiki//dev/random /dev/random
     * @see http://stackoverflow.com/questions/3690273/did-i-understand-dev-urandom Did I understand /dev/urandom?
     */
    public function generateRandomBytes( numberRandomBytes:uint ):ByteArray
    {
        if( numberRandomBytes < 1 )
        {
            numberRandomBytes = 1;
        }
        
        if( numberRandomBytes > 1024 )
        {
            numberRandomBytes = 1024;
        }
        
        var get2bytes:Function;
        
        if (ApplicationDomain.currentDomain.hasDefinition("shell::Program"))
        {
            const Program:Class = Class(ApplicationDomain.currentDomain.getDefinition("shell::Program"));
            
            get2bytes = function():uint
            {
                /* Note:
                This will only work under Linux and Mac OS X and only if
                "/dev/urandom" is available.
                We should test its presence and thorw an error if not found.
                */
                var str:String = Program["open"]( "LC_CTYPE=C tr -dc 'A-F0-9' < /dev/urandom | head -c 2" );
                var b:uint = parseInt( "0x" + str );
                return b;
            }
        }
        else if (ApplicationDomain.currentDomain.hasDefinition("flash.crypto::generateRandomBytes"))
        {
            // Flash player is > 11.0, this will use the more secure built in crypto  library.
            import flash.crypto.generateRandomBytes;
            return flash.crypto.generateRandomBytes(numberRandomBytes);
        }
        else
        {
            // For older Flash player versions (< 11.0) fallback to less secure random generator
            get2bytes = function():uint
            {
                return Math.round(Math.random() * uint.MAX_VALUE) & 0xFF;
            }
        }
        
        
        var bytes:ByteArray = new ByteArray();
        var i:uint;
        for( i = 0; i < numberRandomBytes; i++ )
        {
            bytes.writeByte( get2bytes() );
        }
        
        bytes.position = 0;
        return bytes;
    }
    
}